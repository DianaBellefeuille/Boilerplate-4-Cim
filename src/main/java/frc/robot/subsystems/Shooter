package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX
import frc.robot.Robot;
import frc.robot.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import frc.robot.commands.Shooter.DriverJoystick;

// Creates the elevator subsystem
public class Shooter extends Subsystem {

  public static WPI_TalonSRX mRightLeader = new WPI_TalonSRX(RobotMap. kRightFlyWheelLeader);
  public static WPI_TalonSRX mLeftFollow = new WPI_TalonSRX(RobotMap.kLeftFlyWheelFollower);

   public static SpeedControllerGroup shooterDrive = new SpeedControllerGroup(mRightLeader);

WPI_TalonSRX mPowerCellMotor;

//Shooting
public void setShootBall(boolean wantsShootBall) {
  if (wantsShootBall == true) {
    mShooter.set(Value.kForward);
    mIsShootBall = true;
  } else if (wantsHighGear == false) {
    mShooter.set(Value.0);
    mIsShootBall = false;
  }

  public Shooter(WPI_TalonSRX powercellMotor) {
    mPowerCellMotor = powercellMotor;
    mPowerCellMotor.setInverted(true);
    //mPowerCellMotor.setNeutralMode(NeutralMode.Coast);

    // Current limiting
    mPowerCellMotor.configContinuousCurrentLimit(30, RobotMap.kLongCANTimeoutMs);
    mPowerCellMotor.configPeakCurrentLimit(30, RobotMap.kLongCANTimeoutMs);
    mPowerCellMotor.configPeakCurrentDuration(200, RobotMap.kLongCANTimeoutMs);
    mPowerCellMotor.enableCurrentLimit(true);

  }

  public static Shooter create() {
    WPI_TalonSRX powercellMotor = TalonSRX.createTalonSRXWithEncoder(new WPI_TalonSRX(RobotMap.kPowerCellMotorId));
   
    return new Shooter(powercellMotor);
  }

  @Override
  public void initDefaultCommand() {
    setDefaultCommand(new IntakeJoystick());
  }

}